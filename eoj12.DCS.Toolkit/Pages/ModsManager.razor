@page "/Modsmanager"
@using System.Net;
@using System.Net.Http
@using System.IO
@using System.Threading.Tasks
@using eoj12.DCS.Toolkit.Data;

@*<button class="btn btn-primary" @onclick="@SaveChanges">Save Changes</button>*@

@*<RadzenDataGrid TItem="Mod" Data="@Mods" PageSize="10" EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" EditMode="DataGridEditMode.Single" rowUpdate="@OnUpdateRow">*@
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Mod Definition" Click="@InsertRow" Disabled=@(modToInsert != null || modToUpdate != null) />
<RadzenDataGrid @ref="modsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Mods" TItem="Mod" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
    <Columns>
        <RadzenDataGridColumn TItem="Mod" Property="Title" Title="Title">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Title" Style="width:100%; display: block" Name="Title" />
                <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
      <RadzenDataGridColumn TItem="Mod" Property="Description" Title="Description">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Description" Style="width:100%; display: block" Name="Description" />
            </EditTemplate>
        </RadzenDataGridColumn>
         <RadzenDataGridColumn TItem="Mod" Property="Version" Title="Version" >
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Version" Style="width:100%; display: block" Name="Version" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Size" Title="Size">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Size" Style="width:100%; display: block" Name="Size" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Url" Title="URL">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Url" Style="width:100%; display: block" Name="Url" />
                <RadzenRequiredValidator Text="Url is required" Component="Url" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
         <RadzenDataGridColumn TItem="Mod" Property="TargetFolder" Title="Target Folder">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.TargetFolder" Style="width:100%; display: block" Name="TargetFolder" />
                <RadzenRequiredValidator Text="TargetFolder is required" Component="TargetFolder" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="mod">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mod))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(mod))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(mod))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        @*<RadzenDataGridColumn TItem="Mod" Property="Title" Title="Title" Editable="true" />
        <RadzenDataGridColumn TItem="Mod" Property="Description" Title="Description" Editable="true" />
        <RadzenDataGridColumn TItem="Mod" Property="Version" Title="Version" Editable="true" />
        <RadzenDataGridColumn TItem="Mod" Property="Size" Title="Size" Editable="true" />
        <RadzenDataGridColumn TItem="Mod" Property="Url" Title="URL" Editable="true" />
        <RadzenDataGridColumn TItem="Mod" Property="TargetFolder" Title="Target Folder" Editable="true" />*@
    </Columns>
</RadzenDataGrid>


@code {
    RadzenDataGrid<Mod> modsGrid;
    private bool IsLoading = false;
    private bool IsReady = false;
    private string Url = "https://drive.google.com/uc?id=1AEDTUYVP9Zj0EEeEyjKBsLyLeifNQgr4&export=download";
    List<Mod> Mods = null;
    Mod modToInsert;
    Mod modToUpdate;



    private ModManagerService modManagerService = new ModManagerService();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            await Task.Run(() => Mods = modManagerService.LocalDb.CopyMods());
            IsReady = true;

        }
        catch (Exception ex)
        {
            throw;
        }

    }

    async Task EditRow(Mod mod)
    {
        modToUpdate = mod;
        await modsGrid.EditRow(mod);
    }

    async Task InsertRow()
    {
        modToInsert = new Mod();
        await modsGrid.InsertRow(modToInsert);
    }
    async Task SaveRow(Mod mod)
    {
        await modsGrid.UpdateRow(mod);
    }
    async Task DeleteRow(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }

        if (mod == modToUpdate)
        {
            modToUpdate = null;
        }

        if (Mods.Contains(mod))
        {
            //dbContext.Remove<Order>(mod);

            //dbContext.SaveChanges();

            await modsGrid.Reload();
        }
        else
        {
            modsGrid.CancelEditRow(mod);
            await modsGrid.Reload();
        }
    }


    void OnUpdateRow(Mod mod)
    {

        if (mod == modToInsert)
        {
            modToInsert = null;
        }

        modToUpdate = null;

        //dbContext.Update(order);

        //dbContext.SaveChanges();
    }
    void OnCreateRow(Mod mod)
    {
        //dbContext.Add(order);

        //dbContext.SaveChanges();

        modToInsert = null;
        ;
    }
    

    void CancelEdit(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }

        modToUpdate = null;

        modsGrid.CancelEditRow(mod);

        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }
    void Reset()
    {
        modToInsert = null;
        modToUpdate = null;
    }


}