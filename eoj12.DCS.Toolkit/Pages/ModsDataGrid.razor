@using eoj12.DCS.Toolkit.Data;
@using eoj12.DCS.Toolkit.Models;
@using System.Net;
@using System.Net.Http
@using System.IO
@using System.Threading.Tasks
@*@using Microsoft.AspNetCore.Components;*@

@inject DialogService DialogService
@inject NavigationManager NavigationManager
<RadzenDialog />

@if (ShowLoadFileDefinition)
{
    <div class="form-group">
        <RadzenFieldset Text="Load Mod Definition">
        <div class="row">
            <div class="col">
                <RadzenLabel Text="Enter mod definition Url :" />
                <input type="text" class="form-control" @bind-value="Url" />
                    <RadzenButton Shade="Shade.Lighter" ButtonStyle=" ButtonStyle.Primary" Icon="add_circle_outline" Text="Load Definition file" Click="@DownloadFileDefinition" Disabled="@string.IsNullOrEmpty(Url)"/>
            </div>
            <div class="col">
                <RadzenLabel Text="Select local file :" />
                <InputFile class="form-control" OnChange="@DownloadFileDefinitionFromFile" accept=".json" />
            </div>
        </div>
        </RadzenFieldset>
    </div>
}



    <div class="form-group">
        <div class="row">
            <div class="col">
            @if (ShowScanMod)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Scan Mod" Click="@ScanMod" Disabled=@(modToInsert != null || modToUpdate != null) />
            }
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Mod" Click="@InsertRow" Disabled=@(modToInsert != null || modToUpdate != null) />
            @if (ShowLoadFileDefinition)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Export Definition file" Click="@ExportMods" />
            }
            </div>
            <div class="col">
            @if (ShowIsEnableButton)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Enable All" Click="@EnableAll" />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Disable All" Click="@DisableAll" Shade="Shade.Lighter" />
            }
            </div>
        </div>
    </div>
<RadzenDataGrid @ref="modsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="15" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Mods" TItem="Mod" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" AllowGrouping="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Render="@OnRender" >
    <GroupHeaderTemplate>
        @context.Data.Key
    </GroupHeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Mod" Property="Title" Title="Title" Width="">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Title" Style="width:100%; display: block" Name="Title" />
                <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="ParentModTitle" Title="Mod Definition" Width="">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Description" Title="Description">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Description" Style="width:100%; display: block" Name="Description" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Version" Title="Version">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Version" Style="width:100%; display: block" Name="Version" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Size" Title="Size">
        </RadzenDataGridColumn>
        @if (ShowModUrl)
        {
            <RadzenDataGridColumn TItem="Mod" Property="Url" Title="URL">
                <Template Context="mod">
                    <RadzenLink Path="@mod.Url" Text="Go to url" target="_blank">
                        <RadzenIcon Icon="link" />
                    </RadzenLink>
                </Template>
                <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Url" Style="width:100%; display: block" Name="Url" />
                <RadzenRequiredValidator Text="Url is required" Component="Url" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        }
        @if(ShowModTagetFolder){
        <RadzenDataGridColumn TItem="Mod" Property="TargetFolder" Title="Target Folder"  >
                <Template Context="mod">
                @if(mod.TargetFolder != null){
                    if (mod.TargetFolder.ToLower() == Names.Folders.TECH)
                    {
                        <RadzenIcon Icon="trolley"  IconStyle="IconStyle.Info" alt="@mod.TargetFolder"/>
                    }
                    else if (mod!.TargetFolder.ToLower() == Names.Folders.AIRCRAFT)
                    {
                        <RadzenIcon Icon="flight" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                    }
                    else if (mod!.TargetFolder.ToLower() == Names.Folders.LIVERIES)
                    {
                        <RadzenIcon Icon="palette" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" /> 
                    }
                }
                </Template>
            <EditTemplate Context="mod">
                    <RadzenDropDown @bind-Value=@mod.TargetFolder Data=@Names.Folders.FoldersList />
            </EditTemplate>
        </RadzenDataGridColumn>
        }
        @if (ShowIsDownloadButton & modToInsert ==null ){
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
  
                    @if (mod.IsDownloaded & mod.IsPreviousVersion == false)
                    {
                        <RadzenButton Icon="done" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsDownloading)
                    {
                        <RadzenButton Icon="downloading" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsPreviousVersion)
                    {
                        <RadzenButton Icon="update" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => UpdateMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else
                    {
                        <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadMod(mod))" @onclick:stopPropagation="true" />
                    }                        
            </Template>
        </RadzenDataGridColumn>
        }
        @if (ShowIsEnableButton)
        {
            <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                <Template Context="mod">
                    @if (mod.IsDisable == false && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_on" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DisableMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else if (mod.IsDisable && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_off" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EnableMod(mod))" @onclick:stopPropagation="true" />
                    }           
            </Template>
        </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mod))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                @if ((!mod.IsDisable && (mod.IsDownloaded || mod.IsPreviousVersion)) || DefinitionMode)
                    {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))" @onclick:stopPropagation="true" />
                    }
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(mod))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [Parameter]
    public bool DefinitionMode { get; set; } 
    [Parameter]
    public List<Mod> Mods { get; set; }
    [Parameter]
    public bool ShowScanMod { get; set; }
    [Parameter]
    public bool ShowAddMod { get; set; }
    [Parameter]
    public bool ShowLoadFileDefinition { get; set; }
    [Parameter]
    public bool ShowModUrl { get; set; } = true;
    [Parameter]
    public bool ShowModTagetFolder { get; set; } = true;
    [Parameter]
    public bool ShowIsDownloadButton { get; set; } = true;
    [Parameter]
    public bool ShowIsEnableButton { get; set; } = true;
    RadzenDataGrid<Mod> modsGrid;
    Mod modToInsert;
    Mod modToUpdate;
    private bool IsNew = false;
    private bool IsLoading = false;
    private bool IsReady = false;
    private string Url = "";
    private Settings settings = null;



    private ModManagerService modManagerService = new ModManagerService();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            settings = await modManagerService.GetSettings();
            if (string.IsNullOrEmpty(settings.DCSSaveGamesPath))
                NavigationManager.NavigateTo("/AppSettings");
            Url = settings.SquadronUrl;

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void OnRender(DataGridRenderEventArgs<Mod> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Title = "ParentModTitle", Property = "ParentModTitle", SortOrder = SortOrder.Ascending });
            StateHasChanged();
        }
    }



    private async Task ScanMod()
    {
        try
        {
            IsLoading = true;
            IsReady = false;
            StateHasChanged();
            var localMods = modManagerService.ScanMods();
            Mods = modManagerService.LocalDb.CopyMods();
            IsReady = true;
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task ExportMods()
    {
        try
        {
            var fileName =modManagerService.ExportMods(Mods);
            DialogService.Alert($"Your file has been export to :<br/>{fileName}", "Export Mod Definition", new AlertOptions() { OkButtonText = "Ok" });
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    async Task EditRow(Mod mod)
    {
        try
        {
            modToUpdate = mod;
            await modsGrid.EditRow(mod);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    /// <summary>
    /// On Add button click
    /// </summary>
    /// <returns></returns>
    async Task InsertRow()
    {
        try
        {
            modToInsert = new Mod();
            await modsGrid.InsertRow(modToInsert);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    async Task SaveRow(Mod mod)
    {
        try
        {
            await modsGrid.UpdateRow(mod);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    async Task DeleteRow(Mod mod)
    {
        try
        {
            if (mod == modToInsert)
            {
                modToInsert = null;
            }

            if (mod == modToUpdate)
            {
                modToUpdate = null;
            }

            if (Mods.Contains(mod))
            {
                IsReady = false;
                IsLoading = true;
                if (!DefinitionMode)
                    modManagerService.DeleteMod(mod);
                Mods.Remove(mod);
                IsReady = true;
                IsLoading = false;

                await modsGrid.Reload();
            }
            else
            {
                modsGrid.CancelEditRow(mod);
                await modsGrid.Reload();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async void DownloadFileDefinitionFromFile(InputFileChangeEventArgs e)
    {
        try
        {
            ShowBusyDialog("Loading File Definition... ");
            var reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            Mods = await modManagerService.DownloadFileDefinitionAsync(e.File.OpenReadStream()); ;
            StateHasChanged();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages("File not supported. Please select .json file");
        }
    }
    private async Task DownloadFileDefinition()
    {
        try
        {
            ShowBusyDialog("Downloading File Definition... ");
            IsReady = false;
            IsLoading = true;
            StateHasChanged();
            Mods=  await modManagerService.DownloadFileDefinitionAsync( Url);
            settings.SquadronUrl = Url;
            modManagerService.SaveSettings(settings);
            IsLoading = false;
            IsReady = true;
            StateHasChanged();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task DownloadMod(Mod modDefinition)
    {
        try
        {
            ShowBusyDialog($"Downloading {modDefinition.Title} ... ");
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var contentStream = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            CloseBusyDialog();
            ShowBusyDialog("Extracting mod... ");
            StateHasChanged();
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(contentStream, @$"{settings.DCSSaveGamesPath}\{modDefinition.TargetFolder}");
            modDefinition.IsDownloaded = true;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modDefinition.IsModDefinition = true;
            modManagerService.SaveLocalDb();
            StateHasChanged();
            ScanMod();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task UpdateMod(Mod modDefinition)
    {
        try
        {
            ShowBusyDialog($"Downloading & Updating {modDefinition.Title} ... ");
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var webFileInfo = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            CloseBusyDialog();
            ShowBusyDialog("Extracting mod... ");
            StateHasChanged();
            modManagerService.DeleteMod(modDefinition);
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(webFileInfo, @$"{settings.DCSSaveGamesPath}\{modDefinition.TargetFolder}");
            modDefinition.IsDownloaded = true;
            modDefinition.IsPreviousVersion = false;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modManagerService.SaveLocalDb();
            StateHasChanged();
            ScanMod();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async Task DisableAll()
    {
        try
        {
            Mods.ForEach(m =>  {
                if(m.IsDisable==false){
                    modManagerService.DisableMod(m);
                    m.IsDisable = true;
                    m.IsDownloaded = true;
                }
            });
            await modsGrid.Reload();

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task EnableAll()
    {
        try
        {
            Mods.ForEach(m =>
            {
                if (m.IsDisable)
                {
                    modManagerService.EnableMod(m);
                    m.IsDisable = false;
                    m.IsDownloaded = true;
                }
            });
            await modsGrid.Reload();

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async Task DisableMod(Mod modDefinition)
    {
        try
        {
            modManagerService.DisableMod(modDefinition);
            modDefinition.IsDisable = true;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async Task EnableMod(Mod modDefinition)
    {
        try
        {

            modManagerService.EnableMod(modDefinition);
            modDefinition.IsDisable = false;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void OnUpdateRow(Mod mod)
    {
        try
        {
            if (mod == modToInsert)
            {
                modToInsert = null;
            }
            modToUpdate = null;
            if (!DefinitionMode)
                modManagerService.UpdateMod(mod);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessages(ex.Message).Wait();
        }
    }
    async void OnCreateRow(Mod mod)
    {
        try
        {
            mod = await modManagerService.AddMod(mod, !DefinitionMode);
            modToInsert = mod;
            Mods.Add(mod);
            await modsGrid.Reload();
            StateHasChanged();
            modToInsert = null;
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void CancelEdit(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }
        modToUpdate = null;
        modsGrid.CancelEditRow(mod);
    }
    void Reset()
    {
        modToInsert = null;
        modToUpdate = null;
    }


    async Task ShowBusyDialog(string withMessageAsString = "Loading...")
    {

            await BusyDialog(withMessageAsString);
        
    }

    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
    @<div>
        <div class="row">
            <div class="col-md-12">
                @message
            </div>
        </div>
    </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
        await Task.Delay(2000);
    }
    async Task CloseBusyDialog()
    {
         DialogService.Close();
    }

    async Task ShowErrorMessages(string errorMessage)
    {
        DialogService.Alert(errorMessage, "Error", new AlertOptions() { OkButtonText = "Ok" });

    }

}