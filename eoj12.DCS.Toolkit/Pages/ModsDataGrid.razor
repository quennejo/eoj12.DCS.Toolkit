@using eoj12.DCS.Toolkit.Services;
@using eoj12.DCS.Toolkit.Data;
@using eoj12.DCS.Toolkit.Models;
@using System.Net;
@using System.Net.Http
@using System.IO
@using System.Threading.Tasks

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject TooltipService tooltipService
@*<RadzenDialog />*@

@if (ShowLoadFileDefinition)
{
    <div class="form-group">
        <RadzenFieldset Text="Load Mod Definition">
        <div class="row">
            <div class="col">
                <RadzenLabel Text="Enter mod definition Url :" />
                <input type="text" class="form-control" @bind-value="_url" />
                    <RadzenButton Shade="Shade.Lighter" ButtonStyle=" ButtonStyle.Primary" Icon="rotate_right" Text="Load Definition file" Click="@DownloadFileDefinition" Disabled="@string.IsNullOrEmpty(_url)" />
            </div>
            <div class="col">
                <RadzenLabel Text="Select local file :" />
                <InputFile class="form-control" OnChange="@DownloadFileDefinitionFromFile" accept=".json" />
            </div>
        </div>
        </RadzenFieldset>
    </div>
}
    <div class="form-group">
        <div class="row">
            <div class="col">
            @if (ShowScanMod)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="scanner" class="mt-2 mb-4" Text="Scan Mod" Click="@ScanMod" Disabled=@(_modToInsert != null || _modToUpdate != null) />
            }
            @if (DefinitionMode)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add Mod" Click="@InsertRow" Disabled=@(_modToInsert != null || _modToUpdate != null) />
            }else
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Install Mod" Click="@InsertRow" Disabled=@(_modToInsert != null || _modToUpdate != null) />
            }
            @if (!DefinitionMode && IsNew)
            {
                <div>
                <RadzenLabel Text="Select Mod Package (.zip, .rar) :" />
                <InputFile class="form-control" accept="" OnChange="OnModSelection" />
                </div>
            }
            @if (ShowLoadFileDefinition)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="import_export" class="mt-2 mb-4" Text="Export Definition file" Click="@ExportMods" />
            }
            </div>
            <div class="col">
            @if (ShowIsEnableButton)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="toggle_on" class="mt-2 mb-4" Text="Enable All" Click="@EnableAll" />
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="toggle_off" class="mt-2 mb-4" Text="Disable All" Click="@DisableAll" Shade="Shade.Lighter" />
            }
            </div>
        </div>
    </div>
<RadzenDataGrid @ref="_modsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="15" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Mods" TItem="Mod" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" AllowGrouping="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Render="@OnRender" >
    <GroupHeaderTemplate>
        @context.Data.Key
    </GroupHeaderTemplate>
    <Columns>
      
        @if (!DefinitionMode)
        {
            <RadzenDataGridColumn TItem="Mod" Property="Folder" Title="Name" Width="">
            </RadzenDataGridColumn>

        }
        <RadzenDataGridColumn TItem="Mod" Property="Title" Title="Package" Width="">
            <EditTemplate Context="mod" >
                <RadzenTextBox @bind-Value="mod.Title" Style="width:100%; display: block" Name="Title" Disabled="_modToUpdate != null" />
                <RadzenRequiredValidator Text="Package is required" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
          

        <RadzenDataGridColumn TItem="Mod" Property="Description" Title="Description">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Description" Style="width:100%; display: block" Name="Description" />
            </EditTemplate>
        </RadzenDataGridColumn>

        @if (ShowModTagetFolder)
        {
            <RadzenDataGridColumn TItem="Mod" Property="TargetFolder" Title="Folder">
                <Template Context="mod">
                    @if (mod.TargetFolder != null)
                    {
                        if (mod.TargetFolder.ToLower() == Names.Folders.TECH)
                        {
                            <RadzenIcon Icon="trolley" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                        }
                        else if (mod!.TargetFolder.ToLower() == Names.Folders.AIRCRAFT)
                        {
                            <RadzenIcon Icon="flight" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                        }
                        else if (mod!.TargetFolder.ToLower() == Names.Folders.LIVERIES)
                        {
                            <RadzenIcon Icon="palette" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                        }
                        else if (mod!.TargetFolder.ToLower() == Names.Folders.ROOT)
                        {
                            <RadzenIcon Icon="view_module" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                        }
                    }
                </Template>
                <EditTemplate Context="mod">
                    <RadzenDropDown @bind-Value=@mod.TargetFolder Data=@Names.Folders.FoldersList Disabled="_modToUpdate != null && DefinitionMode ==false" Name="Folder" />
                    <RadzenRequiredValidator Text="Folder is required" Component="Folder" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn TItem="Mod" Property="Version" Title="Version">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Version" Style="width:100%; display: block" Name="Version" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Size" Title="Size">
        </RadzenDataGridColumn>
        @if (ShowModUrl)
        {
            <RadzenDataGridColumn TItem="Mod" Property="Url" Title="URL">
                <Template Context="mod">
                    <RadzenLink Path="@mod.Url" Text="Go to url" target="_blank">
                        <RadzenIcon Icon="link" />
                    </RadzenLink>
                   
                </Template>
                <EditTemplate Context="mod">
                    <RadzenTextBox @bind-Value="mod.Url" Style="width:100%; display: block" Name="Url" />
                <RadzenRequiredValidator Text="Url is required" Component="Url" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        }
        @if (ShowIsDownloadButton & _modToInsert == null)
        {
            <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                <Template Context="mod">

                    @if (mod.IsPotentialMatch)
                    {
                        <RadzenButton Icon="auto_fix_normal" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Text = "Match",Position=TooltipPosition.Top}))"  Click="@(args => Match(mod))" @onclick:stopPropagation="true" />
                    }
                </Template>
            </RadzenDataGridColumn>
        }
        @if (ShowIsDownloadButton & _modToInsert ==null ){
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
  
                    @if (mod.IsDownloaded & mod.IsPreviousVersion == false)
                    {
                        <RadzenButton Icon="done" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsDownloading)
                    {
                        <RadzenButton Icon="downloading" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsPreviousVersion)
                    {
                        <RadzenButton Icon="update" ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => UpdateMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else
                    {
                        <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadMod(mod))" @onclick:stopPropagation="true" />
                    }                        
            </Template>
        </RadzenDataGridColumn>
        }
        @if (ShowIsEnableButton)
        {
            <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                <Template Context="mod">
                    @if (mod.IsDisable == false && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_on" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DisableMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else if (mod.IsDisable && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_off" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EnableMod(mod))" @onclick:stopPropagation="true" />
                    }           
            </Template>
        </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mod))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                @if ((!mod.IsDisable && (mod.IsDownloaded || mod.IsPreviousVersion)) || DefinitionMode)
                    {
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))" @onclick:stopPropagation="true" />
                    }
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(mod))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [Parameter]
    public bool DefinitionMode { get; set; } 
    [Parameter]
    public List<Mod> Mods { get; set; }
    [Parameter]
    public bool ShowScanMod { get; set; }
    [Parameter]
    public bool ShowAddMod { get; set; }
    [Parameter]
    public bool ShowLoadFileDefinition { get; set; }
    [Parameter]
    public bool ShowModUrl { get; set; } = true;
    [Parameter]
    public bool ShowModTagetFolder { get; set; } = true;
    [Parameter]
    public bool ShowIsDownloadButton { get; set; } = true;
    [Parameter]
    public bool ShowIsEnableButton { get; set; } = true;
    RadzenDataGrid<Mod> _modsGrid;
    Mod _modToInsert;
    Mod _modToUpdate;
    IBrowserFile _file = null;
    private string _url = "";
    private Settings _settings = null;

    public bool IsNew {
        get
        {
            return _modToInsert != null;
        } 
    }
    public bool IsEditing
    {
        get
        {
            return _modToUpdate != null;
        }
    }



    private ModManagerService modManagerService = new ModManagerService();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            _settings = await modManagerService.GetSettings();
            if (string.IsNullOrEmpty(_settings.DCSSaveGamesPath))
                NavigationManager.NavigateTo("/AppSettings");
            _url = _settings.SquadronUrl;

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void OnRender(DataGridRenderEventArgs<Mod> args)
    {
        //if (args.FirstRender)
        //{
        //    args.Grid.Groups.Add(new GroupDescriptor() { Title = "ParentModTitle", Property = "ParentModTitle", SortOrder = SortOrder.Ascending });
        //    StateHasChanged();
        //}
    }

    private async Task ScanMod()
    {
        try
        {
            var localMods = modManagerService.ScanMods();
            Mods = modManagerService.LocalDb.CopyMods(true);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task ExportMods()
    {
        try
        {
            var fileName =modManagerService.ExportMods(Mods);
            DialogService.Alert($"Your file has been export to :<br/>{fileName}", "Export Mod Definition", new AlertOptions() { OkButtonText = "Ok" });
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    async Task EditRow(Mod mod)
    {
        try
        {
            _modToUpdate = mod;
            await _modsGrid.EditRow(mod);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    /// <summary>
    /// On Add button click
    /// </summary>
    /// <returns></returns>
    async Task InsertRow()
    {
        try
        {
            _modToInsert = new Mod();
            await _modsGrid.InsertRow(_modToInsert);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    async Task SaveRow(Mod mod)
    {
        try
        {
            await _modsGrid.UpdateRow(mod);
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    async Task DeleteRow(Mod mod)
    {
        try
        {
            if (mod == _modToInsert)
            {
                _modToInsert = null;
            }

            if (mod == _modToUpdate)
            {
                _modToUpdate = null;
            }

            if (Mods.Contains(mod))
            {
                if (!DefinitionMode)
                    modManagerService.DeleteMod(mod);
                Mods.Remove(mod);
                await _modsGrid.Reload();
            }
            else
            {
                _modsGrid.CancelEditRow(mod);
                await _modsGrid.Reload();
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async void DownloadFileDefinitionFromFile(InputFileChangeEventArgs e)
    {
        try
        {
            ShowBusyDialog("Loading File Definition... ");
            //var reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            Mods = await modManagerService.DownloadFileDefinitionAsync(e.File.OpenReadStream()); ;
            StateHasChanged();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages("File not supported. Please select .json file");
        }
    }
    private async void OnModSelection(InputFileChangeEventArgs e)
    {
        try
        {

            //if(e.File.e)
            _file = e.File;
            var fileExtension = Path.GetExtension(e.File.Name);
            if (string.IsNullOrEmpty(fileExtension) || ( fileExtension.ToLower() != ".rar" && fileExtension.ToLower() != ".zip"))
                throw new Exception("File type not supported");
            var fileName = e.File.Name.Replace(fileExtension,"");
            _modToInsert.Title = fileName;

        }
        catch (Exception ex)
        {
            await ShowErrorMessages("File not supported. Please select .rar or .zip file");
        }
    }
    private async Task DownloadFileDefinition()
    {
        try
        {
            ShowBusyDialog("Downloading File Definition... ");
            Mods=  await modManagerService.DownloadFileDefinitionAsync( _url);
            _settings.SquadronUrl = _url;
            modManagerService.SaveSettings(_settings);
            StateHasChanged();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task DownloadMod(Mod modDefinition)
    {
        try
        {
            ShowBusyDialog($"Downloading {modDefinition.Title} ... ");
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var contentStream = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            CloseBusyDialog();
            ShowBusyDialog("Extracting mod... ");
            StateHasChanged();
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(contentStream,_settings.DCSSaveGamesPath,modDefinition.TargetFolder);
            modDefinition.IsDownloaded = true;
            modDefinition.IsModDefinition = true;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modManagerService.SaveLocalDb();
            modManagerService.ScanMods();
            StateHasChanged();
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task UpdateMod(Mod modDefinition)
    {
        try
        {
            ShowBusyDialog($"Downloading & Updating {modDefinition.Title} ... ");
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var webFileInfo = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            CloseBusyDialog();
            ShowBusyDialog("Extracting mod... ");
            StateHasChanged();
            modManagerService.DeleteMod(modDefinition);
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(webFileInfo, _settings.DCSSaveGamesPath,modDefinition.TargetFolder);
            modDefinition.IsDownloaded = true;
            modDefinition.IsPreviousVersion = false;
            modDefinition.IsModDefinition = true;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modManagerService.SaveLocalDb();
            modManagerService.ScanMods();
            StateHasChanged();          
            CloseBusyDialog();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task Match(Mod mod)
    {
        try
        {
            var result = await DialogService.OpenAsync("Confirm match", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>We have found a potential match on your local drive that could fit the squadron mod definition.</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>TargetFolder</th>
                        <th>Version</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td>@mod.PotentialMatch.Title</td>
                        <td>@mod.PotentialMatch.Description</td>
                        <td>@mod.PotentialMatch.TargetFolder</td>
                        <td>@mod.PotentialMatch.Version</td>
                    </tr>

                </tbody>
            </table>

            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Confirm" Click="() => ds.Close(true)" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
            </RadzenStack>);
            if (result)
            {
                modManagerService.Match(mod);
                mod.IsPotentialMatch = false;
                mod.IsDownloaded = true;
                modManagerService.ScanMods();
                await _modsGrid.Reload();
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task DisableAll()
    {
        try
        {
            Mods.ForEach(m =>  {
                if(m.IsDisable==false){
                    modManagerService.DisableMod(m);
                    m.IsDisable = true;
                    m.IsDownloaded = true;
                }
            });
            await _modsGrid.Reload();

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }
    private async Task EnableAll()
    {
        try
        {
            Mods.ForEach(m =>
            {
                if (m.IsDisable)
                {
                    modManagerService.EnableMod(m);
                    m.IsDisable = false;
                    m.IsDownloaded = true;
                }
            });
            await _modsGrid.Reload();

        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async Task DisableMod(Mod modDefinition)
    {
        try
        {
            modManagerService.DisableMod(modDefinition);
            modDefinition.IsDisable = true;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    private async Task EnableMod(Mod modDefinition)
    {
        try
        {

            modManagerService.EnableMod(modDefinition);
            modDefinition.IsDisable = false;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void OnUpdateRow(Mod mod)
    {
        try
        {
            if (mod == _modToInsert)
            {
                _modToInsert = null;
            }
            _modToUpdate = null;
            if (!DefinitionMode){
                modManagerService.UpdateMod(mod);
                Mods = modManagerService.LocalDb.CopyMods(true);
                _modsGrid.Reload();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessages(ex.Message).Wait();
        }
    }
    async void OnCreateRow(Mod mod)
    {
        try
        {
            if(!DefinitionMode)
                ShowBusyDialog("Extracting  Mod... ");
            mod = await modManagerService.AddMod(mod,_file, !DefinitionMode);
            _modToInsert = mod;
            Mods.Add(mod);
            _modToInsert = null;
            if (!DefinitionMode)
            {
                CloseBusyDialog();
                ScanMod();
            }
            await _modsGrid.Reload();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowErrorMessages(ex.Message);
        }
    }

    void CancelEdit(Mod mod)
    {
        if (mod == _modToInsert)
        {
            _modToInsert = null;
        }
        _modToUpdate = null;
        _modsGrid.CancelEditRow(mod);
    }
    void Reset()
    {
        _modToInsert = null;
        _modToUpdate = null;
    }


    async Task ShowBusyDialog(string withMessageAsString = "Loading...")
    {

            await BusyDialog(withMessageAsString);
        
    }

    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
    @<div>
        <div class="row">
            <div class="col-md-12">
                @message
            </div>
        </div>
    </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
        await Task.Delay(2000);
    }
    async Task CloseBusyDialog()
    {
         DialogService.Close();
    }

    async Task ShowErrorMessages(string errorMessage)
    {
        DialogService.Alert(errorMessage, "Error", new AlertOptions() { OkButtonText = "Ok" });

    }
    void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, options.Text, options);

    
}


