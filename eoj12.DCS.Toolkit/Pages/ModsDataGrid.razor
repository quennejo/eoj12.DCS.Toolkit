@using System.Net;
@using System.Net.Http
@using System.IO
@using System.Threading.Tasks
@using eoj12.DCS.Toolkit.Data;
@inject DialogService DialogService
<RadzenDialog />
@*<RadzenButton Text="Show confirm dialog" Click=@(args => DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />*@

@if (ShowLoadFileDefinition)
{
    <div class="form-group">
        <div class="row">
            <div class="col">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Enter mod definition Url :</RadzenText>
                @*<RadzenTextBox @bind-value="Url" class="w-100" />*@
                <input type="text" class="form-control" @bind-value="Url" />
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Load Definition file" Click="@DownloadFileDefinition" />
            </div>
            <div class="col">
                
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select local file :</RadzenText>
                <InputFile class="form-control" OnChange="@DownloadFileDefinitionFromFile" accept=".json" />
            </div>
        </div>
    </div>
}
@if (ShowScanMod) { 
    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Scan Mod" Click="@ScanMod" Disabled=@(modToInsert != null || modToUpdate != null) />
}
<RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Mod" Click="@InsertRow" Disabled=@(modToInsert != null || modToUpdate != null) />
@if(ShowLoadFileDefinition){
<RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" class="mt-2 mb-4" Text="Export Definition file" Click="@ExportMods"  />
}
<RadzenDataGrid @ref="modsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@Mods" TItem="Mod" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
    <Columns>
        <RadzenDataGridColumn TItem="Mod" Property="Title" Title="Title" Width="150px">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Title" Style="width:100%; display: block" Name="Title" />
                <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Description" Title="Description">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Description" Style="width:100%; display: block" Name="Description" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Version" Title="Version">
            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Version" Style="width:100%; display: block" Name="Version" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Property="Size" Title="Size">
@*            <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Size" Style="width:100%; display: block" Name="Size" />
            </EditTemplate>*@
        </RadzenDataGridColumn>
        @if (ShowModUrl)
        {
            <RadzenDataGridColumn TItem="Mod" Property="Url" Title="URL">
                <Template Context="mod">
                    <RadzenLink Path="@mod.Url" Text="Go to url" target="_blank">
                        <RadzenIcon Icon="link" />
                    </RadzenLink>
                </Template>
                <EditTemplate Context="mod">
                <RadzenTextBox @bind-Value="mod.Url" Style="width:100%; display: block" Name="Url" />
                <RadzenRequiredValidator Text="Url is required" Component="Url" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        }
        @if(ShowModTagetFolder){
        <RadzenDataGridColumn TItem="Mod" Property="TargetFolder" Title="Target Folder"  >
                <Template Context="mod">
                @if(mod.TargetFolder != null){
                    if (mod.TargetFolder.ToLower() == Names.Folders.TECH)
                    {
                        <RadzenIcon Icon="trolley"  IconStyle="IconStyle.Info" alt="@mod.TargetFolder"/>
                    }
                    else if (mod!.TargetFolder.ToLower() == Names.Folders.AIRCRAFT)
                    {
                        <RadzenIcon Icon="flight" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" />
                    }
                    else if (mod!.TargetFolder.ToLower() == Names.Folders.LIVERIES)
                    {
                        <RadzenIcon Icon="palette" IconStyle="IconStyle.Info" alt="@mod.TargetFolder" /> 
                    }
                }
                </Template>
            <EditTemplate Context="mod">
                    <RadzenDropDown @bind-Value=@mod.TargetFolder Data=@Names.Folders.FoldersList />
            </EditTemplate>
        </RadzenDataGridColumn>
        }
        @if (ShowIsDownloadButton){
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
  
                    @if (mod.IsDownloaded & mod.IsPreviousVersion == false)
                    {
                        <RadzenButton Icon="done" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsDownloading)
                    {
                        <RadzenButton Icon="downloading" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" />
                    }
                    else if (mod.IsPreviousVersion)
                    {
                        <RadzenButton Icon="update" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => UpdateMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else
                    {
                        <RadzenButton Icon="download" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadMod(mod))" @onclick:stopPropagation="true" />
                    }                        
            </Template>
        </RadzenDataGridColumn>
        }
        @if (ShowIsEnableButton)
        {
            <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                <Template Context="mod">
                    @if (mod.IsDisable == false && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_on" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DisableMod(mod))" @onclick:stopPropagation="true" />
                    }
                    else if (mod.IsDisable && (mod.IsDownloaded || mod.IsPreviousVersion))
                    {
                        <RadzenButton Icon="toggle_off" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EnableMod(mod))" @onclick:stopPropagation="true" />
                    }           
            </Template>
        </RadzenDataGridColumn>
        }
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mod))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="save" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Mod" Context="mod" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
            <Template Context="mod">
                @if (ShowIsEnableButton)
                {
                @if (mod.IsDownloaded || mod.IsPreviousVersion || DefinitionMode)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))" @onclick:stopPropagation="true" />
                    }
                }
            </Template>
            <EditTemplate Context="mod">
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(mod))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mod))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [Parameter]
    public bool DefinitionMode { get; set; } 
    [Parameter]
    public List<Mod> Mods { get; set; }
    [Parameter]
    public bool ShowScanMod { get; set; }
    [Parameter]
    public bool ShowAddMod { get; set; }
    [Parameter]
    public bool ShowLoadFileDefinition { get; set; }
    [Parameter]
    public bool ShowModUrl { get; set; } = true;
    [Parameter]
    public bool ShowModTagetFolder { get; set; } = true;
    [Parameter]
    public bool ShowIsDownloadButton { get; set; } = true;
    [Parameter]
    public bool ShowIsEnableButton { get; set; } = true;
    RadzenDataGrid<Mod> modsGrid;
    Mod modToInsert;
    Mod modToUpdate;
    private bool IsNew = false;
    private bool IsLoading = false;
    private bool IsReady = false;
    private string Url = "https://drive.google.com/uc?id=1AEDTUYVP9Zj0EEeEyjKBsLyLeifNQgr4&export=download";
    //private List<Mod> ModDefinitionList = null;


    private ModManagerService modManagerService = new ModManagerService();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            //await Task.Run(() => Mods = modManagerService.LocalDb.CopyMods());
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task ScanMod()
    {
        try
        {
            IsLoading = true;
            IsReady = false;
            StateHasChanged();
            var localMods = modManagerService.ScanMods();
            Mods = modManagerService.LocalDb.CopyMods();
            IsReady = true;
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
    private async Task ExportMods()
    {
        try
        {
            var fileName =modManagerService.ExportMods(Mods);
            DialogService.Alert($"Your file has been export to :<br/>{fileName}", "Export Mod Definition", new AlertOptions() { OkButtonText = "Ok" });
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    async Task EditRow(Mod mod)
    {
        modToUpdate = mod;
        await modsGrid.EditRow(mod);
    }
    /// <summary>
    /// On Add button click
    /// </summary>
    /// <returns></returns>
    async Task InsertRow()
    {
        modToInsert = new Mod();
        await modsGrid.InsertRow(modToInsert);
    }
    async Task SaveRow(Mod mod)
    {
        await modsGrid.UpdateRow(mod);
    }
    async Task DeleteRow(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }

        if (mod == modToUpdate)
        {
            modToUpdate = null;
        }

        if (Mods.Contains(mod))
        {
            IsReady = false;
            IsLoading = true;
            if(!DefinitionMode)
                modManagerService.DeleteMod(mod);
            Mods.Remove(mod);
            IsReady = true;
            IsLoading = false;

            await modsGrid.Reload();
        }
        else
        {
            modsGrid.CancelEditRow(mod);
            await modsGrid.Reload();
        }
    }

    private async void DownloadFileDefinitionFromFile(InputFileChangeEventArgs e)
    {
        try
        {
            var reader = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();
            Mods = await modManagerService.DownloadFileDefinitionAsync(e.File.OpenReadStream()); ;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception("File not supported. Please select .json file");   
        }
    }
    private async Task DownloadFileDefinition()
    {
        try
        {
            IsReady = false;
            IsLoading = true;
            StateHasChanged();
            Mods=  await modManagerService.DownloadFileDefinitionAsync( Url);
            IsLoading = false;
            IsReady = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception("nmnmn");

        }
    }
    private async Task DownloadMod(Mod modDefinition)
    {
        try
        {
            StateHasChanged();
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var contentStream = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            StateHasChanged();
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(contentStream, @$"{modManagerService.DCSSaveGamesPath}\{modDefinition.TargetFolder}");
            modDefinition.IsDownloaded = true;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modManagerService.SaveLocalDb();
            StateHasChanged();
        }
        catch (Exception ex)
        {

            throw;
        }
    }
    private async Task UpdateMod(Mod modDefinition)
    {
        try
        {
            StateHasChanged();
            modDefinition.IsDownloading = true;
            var url = modDefinition.Url.ToString();
            var webFileInfo = await modManagerService.DownloadFileAsync(url);
            modDefinition.IsDownloading = false;
            modDefinition.IsExtracting = true;
            StateHasChanged();
            modManagerService.DeleteMod(modDefinition);
            modDefinition.ModEntries = modManagerService.ExtractFileFromStream(webFileInfo, @$"{modManagerService.DCSSaveGamesPath}\{modDefinition.TargetFolder}");
            modDefinition.IsDownloaded = true;
            modDefinition.IsPreviousVersion = false;
            modManagerService.LocalDb.Mods.Add(modDefinition);
            modDefinition.IsExtracting = false;
            modManagerService.SaveLocalDb();
            StateHasChanged();
        }
        catch (Exception ex)
        {

            throw;
        }
    }



    private async Task DisableMod(Mod modDefinition)
    {
        try
        {
            StateHasChanged();
            modManagerService.DisableMod(modDefinition);
            modDefinition.IsDisable = true;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private async Task EnableMod(Mod modDefinition)
    {
        try
        {
            StateHasChanged();
            modManagerService.EnableMod(modDefinition);
            modDefinition.IsDisable = false;
            modDefinition.IsDownloaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    void OnUpdateRow(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }
        modToUpdate = null;
        if (!DefinitionMode)
            modManagerService.UpdateMod(mod);
    }
    void OnCreateRow(Mod mod)
    {
        if (!DefinitionMode)
            modManagerService.AddMod(mod);
        modToInsert = null;
        ;
    }


    void CancelEdit(Mod mod)
    {
        if (mod == modToInsert)
        {
            modToInsert = null;
        }

        modToUpdate = null;

        modsGrid.CancelEditRow(mod);

        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }
    void Reset()
    {
        modToInsert = null;
        modToUpdate = null;
    }



}